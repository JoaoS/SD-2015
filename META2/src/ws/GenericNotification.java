package ws;

/**
 * Created by joaosubtil on 12/12/15.
 */

import fundStarter.model.FundStarterBean;
import org.apache.struts2.interceptor.SessionAware;

import javax.servlet.http.HttpSession;
import javax.websocket.*;
import javax.websocket.server.ServerEndpoint;
import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicInteger;


@ServerEndpoint(value = "/wsGeneric", configurator = GetHttpSessionData.class)
public class GenericNotification {

    private static String username = null;
    public static CopyOnWriteArrayList<SessionKeeper> onlineUsers = new CopyOnWriteArrayList<SessionKeeper>();
    private Session session;

    public GenericNotification() {

    }


    @OnOpen
    public void start(Session session, EndpointConfig config) {

        this.session = session;
        HttpSession sessionaux = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());
        FundStarterBean beanS = (FundStarterBean) sessionaux.getAttribute("fundStarterBean");
        this.username = beanS.getUsername();
        System.out.println("created websocket for:\nusername=" + beanS.getUsername() + "\narraySize=" + onlineUsers.size());
        onlineUsers.add(new SessionKeeper(session, beanS.getUsername(), sessionaux, beanS));
        setUserHistory(beanS.getOldWebsocketMessages(), beanS);

    }

    @OnClose
    public void end() {
        // clean up once the WebSocket connection is closed
        for (int i = 0; i < onlineUsers.size(); i++) {
            if (onlineUsers.get(i).getSession() == session) {
                System.out.println("Removed User:" + onlineUsers.get(i).getUsername());
                onlineUsers.remove(i);

            }
        }
    }

    @OnMessage
    public void receiveMessage(String message) {
        /*
        *
        * USER IS NOT ABLE TO SEND MESSAGES, MESSAGES ARE GENERATED BY SERVER
        *
        * */
    }

    @OnError
    public void handleError(Throwable t) {
        System.out.println("Websocket Error");
        t.printStackTrace();
    }

    private static void setUserHistory(ArrayList<String> oldMessages, FundStarterBean beanS) {

        String username=beanS.getUsername();
        int i=0;
        try {
            //ver qual é o user
            for (i=0;i<onlineUsers.size();i++){

                //mandar as mensagens
                if (onlineUsers.get(i).getUsername().equals(username)){

                    for (int j=0;j<oldMessages.size();j++){
                        onlineUsers.get(i).getSession().getBasicRemote().sendText(oldMessages.get(j));
                    }
                }
            }
        }catch (IOException | IllegalStateException e0) {
            // clean up once the WebSocket connection is closed
            try {
                onlineUsers.get(i).getSession().close();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
    }

    public static void donationNotification(String message, String toAdmin, String updateHtml) {

        //actualizar o html
        int i = 0;
        try {
            for (i = 0; i < onlineUsers.size(); i++) {

                //se o admin está online mando notificacao para ele
               if (onlineUsers.get(i).getUsername().equals(toAdmin)){
                   //mandar mensagem
                   onlineUsers.get(i).getSession().getBasicRemote().sendText(message);
                   //guardar no historico
                   onlineUsers.get(i).getBeanS().addOldWebsocketMessages(message);
               }

                //actualizar os valores em toda a gente
                onlineUsers.get(i).getSession().getBasicRemote().sendText(updateHtml);
            }
        } catch (IOException | IllegalStateException e0) {
            // clean up once the WebSocket connection is closed
            try {
                onlineUsers.get(i).getSession().close();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }

    }
    /*
    * igual á de cima mas não actualiza os valores do projecto
    * */
    public static void commentNotification(String message, String toAdmin) {
        int i = 0;
        try {
            for (i = 0; i < onlineUsers.size(); i++) {

                //se o admin está online mando notificacao para ele
                if (onlineUsers.get(i).getUsername().equals(toAdmin)){
                    //mandar mensagem
                    onlineUsers.get(i).getSession().getBasicRemote().sendText(message);
                    //guardar no historico
                    onlineUsers.get(i).getBeanS().addOldWebsocketMessages(message);
                }
            }
        } catch (IOException | IllegalStateException e0) {
            // clean up once the WebSocket connection is closed
            try {
                onlineUsers.get(i).getSession().close();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }

    }


}
